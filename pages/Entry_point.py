import os
import pandas as pd
import streamlit as st
from modules.Indicators import Chart, CandlestickIndicator

st.set_page_config(page_title="–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞", layout="wide")


def get_available_symbols(dataset_dir="datasets"):
    files = os.listdir(dataset_dir)
    symbols = [
        f.replace(".csv", "") for f in files
        if f.endswith(".csv")
    ]
    return sorted(symbols)


@st.cache_data
def load_data(symbol: str):
    filename = f"{symbol}.csv"
    filepath = os.path.join("datasets", filename)

    if not os.path.exists(filepath):
        st.error(f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        download_url = f"/Download_data?symbol={symbol}"
        st.markdown(f"üëâ [–°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}]({download_url})")
        st.stop()

    df = pd.read_csv(filepath, parse_dates=["timestamp"])
    df.sort_values("timestamp", inplace=True)
    df.reset_index(drop=True, inplace=True)
    return df


# available_symbols = get_available_symbols()
# try:
#     symbol = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–∞—á–∞–Ω–Ω—É—é –º–æ–Ω–µ—Ç—É", [st.query_params['symbol']]+available_symbols)
# except KeyError:
#     symbol = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–∞—á–∞–Ω–Ω—É—é –º–æ–Ω–µ—Ç—É", available_symbols)


try:
    symbol = st.text_input("–°–∏–º–≤–æ–ª —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã", st.query_params['symbol'])
except KeyError:
    symbol = st.text_input("–°–∏–º–≤–æ–ª —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã", "BTCUSDT")

df = load_data(symbol)


st.sidebar.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–æ—Å—Ç–∞ —Ü–µ–Ω—ã")
window_size = st.sidebar.number_input(
    "–ö–æ–ª-–≤–æ —Å–≤–µ—á–µ–π SMA | (–ó–∞ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç)", min_value=1, value=1440, step=1,
     help="1 –¥–µ–Ω—å = 1440 –º–∏–Ω—É—Ç, 1 –Ω–µ–¥–µ–ª—è = 10080 –º–∏–Ω—É—Ç–∞–º, 1 –º–µ—Å—è—Ü = ~43200 –º–∏–Ω—É—Ç"
)
sma_threshold_pct = st.sidebar.number_input(
    "–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ SMA (%) | (–ù–∞ —Å–∫–æ–ª—å–∫–æ –≤—ã—Ä–æ—Å–ª–æ)", min_value=1, value=30, step=1
)


def find_anomalies(df: pd.DataFrame, window: int = 20, threshold_pct: float = 30) -> list:
    df = df.copy()

    # –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ –ø–æ —Ü–µ–Ω–µ –∑–∞–∫—Ä—ã—Ç–∏—è
    df["sma"] = df["close"].rolling(window=window).mean()

    anomalies = []

    # –ù–∞—á–∏–Ω–∞–µ–º —Å –∏–Ω–¥–µ–∫—Å–∞ = window (–¥–æ —ç—Ç–æ–≥–æ SMA –±—É–¥–µ—Ç NaN)
    for i in range(window, len(df)):
        sma = df.loc[i, "sma"]
        close = df.loc[i, "close"]

        if pd.notna(sma) and close > sma * (1 + threshold_pct / 100):
            anomalies.append(i)

    return anomalies

raw_anomalies = find_anomalies(df, window_size, sma_threshold_pct)
n_candles_context = 100

filtered_anomalies = []
last_used_index = -1

for idx in raw_anomalies:
    if idx > last_used_index + n_candles_context:
        filtered_anomalies.append(idx)
        last_used_index = idx

anomaly_options = [df.loc[i, "timestamp"] for i in filtered_anomalies]

if anomaly_options:
    st.write(f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ—á–µ–∫ —Ä–æ—Å—Ç–∞: {len(anomaly_options)}")
    selected_timestamp = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É: ", anomaly_options)

    selected_index = df[df["timestamp"] == selected_timestamp].index[0]

    start_idx = max(0, selected_index - n_candles_context)
    end_idx = min(len(df), selected_index + n_candles_context)
    df_window = df.iloc[start_idx:end_idx]

    chart = Chart(df_window)
    chart.add(CandlestickIndicator())
    fig = chart.build()
    st.plotly_chart(fig, use_container_width=True)
else:
    st.warning("–†–æ—Å—Ç–∞ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–º–µ–Ω—å—à–∏—Ç—å –ø–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã.")
